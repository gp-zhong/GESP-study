<!--exercise/detail.wxml-->
<view class="container">
  <view class="exercise-header">
    <view class="title">两数之和</view>
    <view class="difficulty-tag easy">简单</view>
  </view>
  
  <view class="card">
    <view class="section">
      <view class="section-title">题目描述：</view>
      <view class="description">
        给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。
      </view>
    </view>
    
    <view class="section">
      <view class="section-title">示例：</view>
      <view class="example">
        <view>输入：nums = [2, 7, 11, 15], target = 9</view>
        <view>输出：[0, 1]</view>
      </view>
    </view>
    
    <view class="section">
      <view class="section-title">你的解答：</view>
      <textarea class="code-editor" placeholder="在这里输入你的代码..."></textarea>
    </view>
    
    <button class="btn submit-btn">提交解答</button>
    
    <view class="ai-analysis">
      <view class="ai-analysis-header" bindtap="toggleAnalysis">
        <view class="ai-analysis-title">
          <icon class="icon" type="info" size="16" color="#4a90e2"></icon>
          DeepSeek AI 解析
        </view>
        <view class="ai-analysis-toggle">
          <icon class="icon" type="{{showAnalysis ? 'up' : 'down'}}" size="12" color="#999"></icon>
        </view>
      </view>
      
      <view class="ai-analysis-content" wx:if="{{showAnalysis}}">
        <view class="ai-analysis-section">
          <view class="ai-analysis-subtitle">解题思路：</view>
          <view class="ai-analysis-text">
            这题可以使用哈希表来解决，通过一次遍历数组，将每个元素及其索引存入哈希表，同时查找是否存在 target - nums[i] 的元素，若存在则返回两个索引。
          </view>
        </view>
        
        <view class="ai-analysis-section">
          <view class="ai-analysis-subtitle">代码实现：</view>
          <view class="ai-analysis-code">
            <text>function twoSum(nums, target) {
  const map = new Map();
  for (let i = 0; i &lt; nums.length; i++) {
    const complement = target - nums[i];
    if (map.has(complement)) {
      return [map.get(complement), i];
    }
    map.set(nums[i], i);
  }
  return [];
}</text>
          </view>
        </view>
        
        <view class="ai-analysis-section">
          <view class="ai-analysis-subtitle">复杂度分析：</view>
          <view class="ai-analysis-text">
            - 时间复杂度：O(n)，其中 n 是数组的长度。只需要遍历一次数组。
            - 空间复杂度：O(n)，其中 n 是数组的长度。主要是哈希表的开销。
          </view>
        </view>
      </view>
    </view>
  </view>
</view> 